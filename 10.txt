<dependency>
            <groupId>lib</groupId>
            <artifactId>lid</artifactId>
            <version>1.0</version>
            <scope>system</scope>
            <systemPath>${project.basedir}/lib/lib-1.0.jar</systemPath>
</dependency>
----------------------------------------------------------------------------
<persistence-unit name="OnTapJPA_SocKet_sql">
        <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
        <properties>
            <property name="jakarta.persistence.jdbc.driver"
                      value="com.microsoft.sqlserver.jdbc.SQLServerDriver"/>
            <property name="jakarta.persistence.jdbc.url"
                      value="jdbc:sqlserver://localhost:1433;databaseName=QuanLyTuyenDungDB;trustServerCertificate=true;encrypt=true;"/>
            <property name="jakarta.persistence.jdbc.user" value="sa"/>
            <property name="jakarta.persistence.jdbc.password"
                      value="sapassword"/>
            <property name="jakarta.persistence.jdbc.dialect"
                      value="org.hibernate.dialect.SQLServerDialect"/>
            <property name="hibernate.show_sql" value="false"/>
            <property name="hibernate.format_sql" value="false"/>
            <property name="hibernate.hbm2ddl.auto" value="update"/>
        </properties>
</persistence-unit>
------------------------------------------------------------------------
	<!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-core -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>6.4.4.Final</version>
            <type>pom</type>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-testing -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-testing</artifactId>
            <version>6.4.4.Final</version>
            <type>pom</type>
            <scope>test</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.10.2</version>
            <scope>test</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>5.10.2</version>
            <scope>test</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.microsoft.sqlserver/mssql-jdbc -->
        <dependency>
            <groupId>com.microsoft.sqlserver</groupId>
            <artifactId>mssql-jdbc</artifactId>
            <version>12.3.0.jre17-preview</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.30</version>
            <scope>provided</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.mariadb.jdbc/mariadb-java-client -->
        <dependency>
            <groupId>org.mariadb.jdbc</groupId>
            <artifactId>mariadb-java-client</artifactId>
            <version>3.3.3</version>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jaxb</groupId>
            <artifactId>jaxb-runtime</artifactId>
            <version>3.0.2</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate.orm</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>6.4.4.Final</version>
            <scope>compile</scope>
        </dependency>
-----------------------------------------------------------------------------
public class Server {
    public static void main(String[] args) {
        ServerSocket serverSocket = null;
        try{
            serverSocket = new ServerSocket(4091);
            System.out.println("Server is listening on port 4091");
            while (true) {
                Socket socket = serverSocket.accept();
                System.out.println("New client connected");
                System.out.println("Client IP: " + socket.getInetAddress().getHostAddress());
                System.out.println("Client Port: " + socket.getPort());

                Handler handler = new Handler(socket);
                Thread thread = new Thread(handler);
                thread.start();

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
--------------------------------------------------------------------------------
public class Handler implements Runnable {
    private Socket socket;
    private CandidateDAO candidateDAO;
    private EntityManager em;

    public Handler(Socket socket) {
        this.socket = socket;
        candidateDAO = new CandidateImpl();
        em = Persistence.createEntityManagerFactory("OnTapJPA_SocKet_sql").createEntityManager();
    }

    @Override
    public void run() {
        try {
            DataInputStream in = new DataInputStream(socket.getInputStream());
            DataOutputStream out = new DataOutputStream(socket.getOutputStream());
            ObjectOutputStream oos = new ObjectOutputStream(socket.getOutputStream());
            while (true) {
                int choice = in.readInt();
                switch (choice) {
                    case 0:
-----------------------------------------------------------------------------------
public class Client {
    public static void main(String[] args) {
        try (Socket socket = new Socket("localhost", 4091);
             DataInputStream in = new DataInputStream(socket.getInputStream());
             DataOutputStream out = new DataOutputStream(socket.getOutputStream());
             ObjectInputStream ois = new ObjectInputStream(socket.getInputStream())
        ) {
            Scanner scanner = new Scanner(System.in);
            System.out.println("Connect to server");
            while (true) {
                System.out.println("""
                        0. Exit \s
                        1. List positions\s
                        2. List Candidates By Companies\s
                        3. List Candidates With Longest Working\s
                        4. Add Candidate\s
                        5. List Years Of Experience By Position\s
                        6. List Candidates And Certificates""");
                System.out.print("Choose: ");
                int choice = scanner.nextInt();
                out.writeInt(choice);
                out.flush();
                switch (choice) {
                    case 0 -> {
-------------------------------------------------------------------------------------
Thuộc tính đa trị:(Set<>)
@ElementCollection
    @CollectionTable(name = "books_authors", joinColumns = @JoinColumn(name = "ISBN"))
    @Column(name = "author", nullable = False)
    private Set<String> author;
-----------------------
Enum
public enum Status {
    PENDDING("Pendding"), APPROVED("Approved"), REJECTED("Rejected");
    private String value;

    Status(String value) {
        this.value = value;
    }

    @Override
    public String toString() {
        return "Status{" +
                "value='" + value + '\'' +
                '}';
    }
}
-------->
	@Enumerated
    	@Column(name = "status")
    	private Status status;
-----------------------------
@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
@DiscriminatorColumn(name = "role", discriminatorType = DiscriminatorType.STRING)
-----------------------------
Bên bảng khác
	@Embedded
    	private Approval approval;
Bên bảng Approval
@Getter
@Setter
@NoArgsConstructor
@ToString
@Embeddable
public class Approval implements Serializable {
    @Column(name = "approval_date")
    private LocalDate approvalDate;
    @Enumerated
    @Column(name = "status")
    private Status status;
}
--------------------------------------
@EqualsAndHashCode
.
.
.
@EqualsAndHashCode.Exclude
private int rating;
@EqualsAndHashCode.Exclude
private String comment;
@Id
@ManyToOne(fetch = FetchType.LAZY)
@JoinColumn(name = "ISBN")
private Book book;
-------------------------------------
@ManyToMany
@JoinTable(
            name = "items_ingredients",
            joinColumns = @JoinColumn(name = "ingredient_id"),
            inverseJoinColumns = @JoinColumn(name = "item_id")
    )

private Set<Item> items;